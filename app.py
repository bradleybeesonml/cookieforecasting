# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13XjXOgaKRPDRi2-_YziPUHFCkCg3uzL8
"""

import streamlit as st
import pandas as pd
import numpy as np
import xgboost as xgb
from prophet import Prophet
import joblib
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# --- Load models ---
minis_prophet = joblib.load("minis_prophet.pkl")
full_prophet = joblib.load("full_prophet.pkl")
minis_xgb = joblib.load("minis_xgb.pkl")
full_xgb = joblib.load("full_xgb.pkl")

# --- Helper functions ---
def create_recent_df(mini_sales, full_sales, base_monday):
    dates = [base_monday + timedelta(days=i) for i in range(6)]  # Monday to Saturday
    df = pd.DataFrame({
        "Date": dates,
        "Number Minis": mini_sales,
        "Number Full Size": full_sales
    })
    df["is_closed"] = 0
    df["is_early_close"] = 0
    df["dow"] = df["Date"].dt.weekday
    df["month"] = df["Date"].dt.month
    df["day"] = df["Date"].dt.day
    return df

def forecast_range(start_date, days):
    return pd.date_range(start=start_date, periods=days)

def make_forecast(forecast_dates, blend_weights):
    df = pd.DataFrame({"Date": forecast_dates})
    df["dow"] = df["Date"].dt.weekday
    df["month"] = df["Date"].dt.month
    df["day"] = df["Date"].dt.day
    df["is_closed"] = (df["dow"] == 6).astype(int)
    df["is_early_close"] = 0
    df["cap"] = 800

    prophet_input = df.rename(columns={"Date": "ds"})
    minis_prophet_pred = minis_prophet.predict(prophet_input)[["ds", "yhat"]].set_index("ds")["yhat"].clip(0, 350)
    full_prophet_pred = full_prophet.predict(prophet_input)[["ds", "yhat"]].set_index("ds")["yhat"].clip(0, 800)

    xgb_features = ["dow", "month", "day", "is_early_close", "is_closed"]
    minis_xgb_pred = minis_xgb.predict(df[xgb_features])
    full_xgb_pred = full_xgb.predict(df[xgb_features])

    df["Predicted Minis"] = blend_weights[0] * minis_prophet_pred.values + blend_weights[1] * minis_xgb_pred
    df["Predicted Full Size"] = blend_weights[2] * full_prophet_pred.values + blend_weights[3] * full_xgb_pred

    df.loc[df["is_closed"] == 1, ["Predicted Minis", "Predicted Full Size"]] = 0
    return df

# --- Streamlit Interface ---
st.title("üç™ Crumbl Cookie Sales Forecast")
st.markdown("Enter the last **full calendar week of sales (Mon-Sat)** and desired forecast range.")

st.subheader("1. Sales for Last Week")
days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
mini_sales = []
full_sales = []

col1, col2 = st.columns(2)
with col1:
    for day in days:
        mini_sales.append(st.number_input(f"{day} - Minis", min_value=0, step=1, key=f"mini_{day}"))
with col2:
    for day in days:
        full_sales.append(st.number_input(f"{day} - Full Size", min_value=0, step=1, key=f"full_{day}"))

base_monday = st.date_input("Start date of last Monday", value=datetime.today() - timedelta(days=datetime.today().weekday() + 7))
forecast_days = st.number_input("Forecast how many days ahead?", min_value=1, max_value=60, value=14)

if st.button("üìä Forecast Sales"):
    recent_df = create_recent_df(mini_sales, full_sales, pd.to_datetime(base_monday))
    forecast_dates = forecast_range(datetime.today(), forecast_days)

    # Use the last week only as context; models are pre-trained
    blend_df = make_forecast(forecast_dates, blend_weights=(0.7, 0.3, 0.8, 0.2))

    st.subheader("üîÆ Forecasted Sales")
    st.dataframe(blend_df[["Date", "Predicted Minis", "Predicted Full Size"]].set_index("Date"))

    # Plot
    st.subheader("üìà Forecast Plot")
    fig, ax = plt.subplots(figsize=(12, 5))
    ax.plot(blend_df["Date"], blend_df["Predicted Minis"], label="Minis", marker='o')
    ax.plot(blend_df["Date"], blend_df["Predicted Full Size"], label="Full Size", marker='x')
    ax.set_title("Predicted Sales by Day")
    ax.set_xlabel("Date")
    ax.set_ylabel("Cookies")
    ax.legend()
    ax.grid(True)
    st.pyplot(fig)

    # Weekly totals
    blend_df["Week"] = blend_df["Date"].dt.to_period("W").apply(lambda x: x.start_time.strftime("%Y-%m-%d"))
    weekly_totals = blend_df.groupby("Week")[["Predicted Minis", "Predicted Full Size"]].sum().reset_index()
    st.subheader("üì¶ Total Cookies Forecasted Per Week")
    st.dataframe(weekly_totals.set_index("Week"))